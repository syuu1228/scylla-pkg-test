#!groovy
// Pipeline byo-dtest
// Get from which ready relocatable package, and from which branches to run: dtest.

Map modules = [:]
pipeline {
	parameters {
		// Mandatory
		string(name: 'X86_NODE_PARAM', defaultValue: 'packager', description: 'Useful options: packager,loki,dgccd201,thor,ran,sif,huginn,muninn and gce-leader')
		string(name: 'DEFAULT_PRODUCT', defaultValue: 'scylla', description: 'Default product for all repos, unless specified otherwise.')
		choice(name: 'DEFAULT_BRANCH', choices: ['next','master'], description: 'Default branch for all repos, unless specified otherwise.')

		// Optional
		choice(name: 'ARTIFACT_SOURCE_JOB_NAME', choices: ['next','byo','build'], description: 'Jenkins build job that built the relocatable package')
		string(name: 'ARTIFACT_SOURCE_BUILD_NUM', defaultValue: '', description: 'Build number to take artifacts from. Leave empty to use last available build. Use with ARTIFACT_SOURCE_JOB_NAME to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_WEB_URL', defaultValue: 'latest', description: 'URL to take reloc items from. Use when reloc is not available on jenkins, or when running on AWS, which will download faster from S3.')
		string(name: 'TIMEOUT_PARAM', defaultValue: '12', description: 'Job timeout (in hours)')
		choice(name: 'BUILD_MODE', choices: ['release','debug','dev'], description: 'Choose build mode of relocatable package: release | debug | dev. Used also to select the default set of tests to run if INCLUDE_DTESTS is empty')
		choice(name: 'TEST_RUNNER', choices: ['nosetests','pytests'], description: 'Which test runner to run')
		string(name: 'SPECIAL_CONFIGURE_PY_PARAMS', defaultValue: '', description: 'Any special parameters to pass to configure.py (pass the whole flag. example: --cflags="VALUE")')
		booleanParam(name: 'DTEST_DEBUG_INFO', defaultValue: false, description: 'Check this to set env PRINT_DEBUG=true and DEBUG=true when running dtest')
		booleanParam(name: 'DTEST_KEEP_LOGS', defaultValue: false, description: 'Check this, to keep dtest logs (set KEEP_LOGS=true)')
		string(name: 'INCLUDE_DTESTS', defaultValue: 'gating' , description: 'Specify which dtests to run. Leave empty for all. gating - for next tests (2-4 hours). Any list of tests, space separated. cql_additional_tests.py:TestCQL.keyspace_test - just an example of a specific test. Pay attention to syntax. Tests should be separated by spaces, attributes by commas.')
		string(name: 'EXCLUDE_DTESTS', defaultValue: '', description: 'Specify dtests to exclude.')
		string(name: 'NUM_OF_DTEST_REPEATS', defaultValue: '1', description: 'Define the number of repeats for each dtest.')
		string(name: 'NUMBER_RANDOM_DTESTS', defaultValue: '', description: 'Specify number of random dtests to run. (Leave empty for none [default]; set to "all" to shuffle all tests)')
		string(name: 'RANDOM_DTESTS_SEED', defaultValue: '', description: 'Optionally specify a random seed for reproducing a run of random dtests (printed as `random_seed` by dtest.sh)')
		string(name: 'SCYLLA_EXT_OPTS_EXTRA_SETTINGS', defaultValue: '--abort-on-seastar-bad-alloc --abort-on-lsa-bad-alloc=1', description: 'Anything you put here will be added to any default settings of SCYLLA_EXT_OPTS env var sent to nose.')
		string(name: 'SCYLLA_EXT_ENV_EXTRA_SETTINGS', defaultValue: 'ASAN_OPTIONS=disable_coredump=0:abort_on_error=1;UBSAN_OPTIONS=halt_on_error=1:abort_on_error=1;BOOST_TEST_CATCH_SYSTEM_ERRORS=no', description: 'Anything you put here will be added to any default settings of SCYLLA_EXT_ENV env var sent to nose.')
		booleanParam(name: 'PRESERVE_WORKSPACE', defaultValue: false, description: 'Check this if you need the workspace to remain (for debug)')
		booleanParam(name: 'DEBUG_MAIL', defaultValue: true, description: 'Uncheck if you want mail to rnd-int. Default is to sent to build requester only (you).')
		booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to check pipeline syntax. will not perform anything.')
		string(name: 'DTEST_REPO', defaultValue: 'git@github.com:scylladb/${DEFAULT_PRODUCT}-dtest.git', description: '')
		string(name: 'DTEST_BRANCH', defaultValue: '${DEFAULT_BRANCH}', description: '')
		string(name: 'CCM_REPO', defaultValue: 'git@github.com:scylladb/${DEFAULT_PRODUCT}-ccm.git', description: '')
		string(name: 'CCM_BRANCH', defaultValue: '${DEFAULT_BRANCH}', description: '')
		string(name: 'RELENG_REPO', defaultValue: 'git@github.com:scylladb/${DEFAULT_PRODUCT}-pkg.git', description: 'Pay attention that this controls the job parameters. Be sure to give a default that contains the parameters directive. If changed here, should also change on pipeline section')
		string(name: 'RELENG_BRANCH', defaultValue: '${DEFAULT_BRANCH}', description: 'Pay attention that this controls the job parameters. Be sure to give a default that contains the parameters directive. If changed here, should also change on pipeline section')
	}

	agent {
		label {
			label env.X86_NODE_PARAM
		}
	}

	options {
		timestamps()
		timeout(time: env.TIMEOUT_PARAM, unit: 'HOURS')
		buildDiscarder(
			logRotator(
				numToKeepStr: '40',
				daysToKeepStr: '14'
			)
		)
	}

	environment {
		AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
		AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
	}

	stages {

		stage ('Prepare') {
			steps {
				script {
					generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
					general = load "${generalProperties.groovyPath}/general.groovy"
					general.initPipeline()

					artifactSourceJob = params.ARTIFACT_SOURCE_JOB_NAME
					if (artifactSourceJob.contains("byo")) {
						artifactSourceJob = "${branchProperties.calledBuildsDir}${branchProperties.byoJobName}"
					} else if (artifactSourceJob.contains("next")) {
						artifactSourceJob = "${branchProperties.calledBuildsDir}${branchProperties.nextJobName}"
					} else { // build
						artifactSourceJob = "${branchProperties.calledBuildsDir}${branchProperties.buildJobName}"
					}
					artifactSourceJobNum = params.ARTIFACT_SOURCE_BUILD_NUM ?: Jenkins.instance.getItemByFullName(artifactSourceJob).lastSuccessfulBuild.number.toString()
					paramArtifactWebUrl = params.ARTIFACT_WEB_URL ?: "latest"
					cloudUrl = artifact.getLastSuccessfulUrl (
						artifactWebUrl: paramArtifactWebUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						fieldName: "reloc-pack-url:"
					)
				}
			}
		}

		stage('Checkout') {
			steps {
				script {
					lastStage = env.STAGE_NAME
					git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
					git.checkoutToDir (params.RELENG_REPO, params.RELENG_BRANCH, gitProperties.scyllaPkgCheckoutDir, disableSubmodules)
					git.checkoutToDir (params.DTEST_REPO, params.DTEST_BRANCH, gitProperties.scyllaDtestCheckoutDir)
					git.checkoutToDir (params.CCM_REPO, params.CCM_BRANCH, gitProperties.scyllaCcmCheckoutDir)
					downloadFromCloud = true
					artifact.getDbuildAsArtifactOrFromSourceControl (
						webUrl: cloudUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						scyllaBranch: branchProperties.nextBranchName,
						downloadFromCloud: downloadFromCloud,
					)

					general.lsPath (WORKSPACE, "Workspace content after check-outs")
				}
			}
		}

		stage('Copy Artifacts') {
			steps {
				script {
					lastStage = env.STAGE_NAME
					artifact.getRelocArtifacts (
						buildMode: params.BUILD_MODE,
						cloudUrl: cloudUrl,
						architecture: branchProperties.x86ArchName,
					)

					echo "dtest will run based on relocatable package. Info: ============="
					sh "cat ${generalProperties.buildMetadataFile}"
					echo "============================"
				}
			}
		}

		stage('dtest') {
			steps {
				script {
					lastStage = env.STAGE_NAME
					test.setupTestEnv(params.BUILD_MODE)
					test.doDtest(
						dryRun: params.DRY_RUN,
						dtestMode: params.BUILD_MODE,
						testRunner: params.TEST_RUNNER,
						dtestDebugInfoFlag: params.DTEST_DEBUG_INFO,
						dtestKeepLogsFlag: params.DTEST_KEEP_LOGS,
						excludeTests: params.EXCLUDE_DTESTS,
						includeTests: params.INCLUDE_DTESTS,
						extOpts: params.SCYLLA_EXT_OPTS_EXTRA_SETTINGS,
						extEnv: params.SCYLLA_EXT_ENV_EXTRA_SETTINGS,
						randomDtests: params.NUMBER_RANDOM_DTESTS,
						randomDtestsSeed: params.RANDOM_DTESTS_SEED,
						dtestRepeats: params.NUM_OF_DTEST_REPEATS,
						dtestType: "byo",
						architecture: branchProperties.x86ArchName,
					)
				}
			}
		}
	}

	post {
		//Order is: always, changed, fixed, regression, aborted, failure, success, unstable, and cleanup.
		always {
			script {
				if (binding.hasVariable('initPipelineDone')) {
					mail.mailIfError("$devAddress", "${currentBuild.currentResult} stage $lastStage: $jobTitle", "${currentBuild.currentResult}: $jobTitle on stage $lastStage: $logText")
					git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
				} else {
					cleanWs()
				}
			}
		}

		fixed {
			script {
				mail.mailFixed("$devAddress", "Fixed ${currentBuild.currentResult}: $jobTitle", "Fixed ${currentBuild.currentResult}: $jobTitle: $logText")
			}
		}
	}
}
