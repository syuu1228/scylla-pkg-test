#!/usr/bin/python3

import boto3
import argparse
import re

keys = ['ImageId', 'Name', 'CreationDate', 'Public']

parser = argparse.ArgumentParser()
parser.add_argument('-n', '--noheader', action='store_true', help='disable printing of header')
parser.add_argument('--sort',      choices=keys, help='primary sort key')
parser.add_argument('--secondary', choices=keys, help='secondary sort key')
parser.add_argument('--id', '--instance-id')
parser.add_argument('--name', '--instance-name')
parser.add_argument('--rname', help='instance name regular expression')
parser.add_argument('--region', help='Select specific region, if empty will run on all')
args = parser.parse_args()

if args.rname:
	rname = re.compile(args.rname)
else:
	rname = None

sort_key_dict = {}
for i in range(len(keys)):
	sort_key_dict[keys[i]] = i

if args.sort:
	primary_key = sort_key_dict[args.sort]
else:
	primary_key = sort_key_dict['Name']
if args.secondary:
	secondary_key = sort_key_dict[args.secondary]
else:
	secondary_key = None
if args.region:
	regions = [args.region]
else:
	client = boto3.client('ec2')
	regions = [region['RegionName'] for region in client.describe_regions()['Regions']]

def cmp_records(x, y):
	if x[primary_key] < y[primary_key]:
		return -1
	elif x[primary_key] > y[primary_key]:
		return 1
	elif secondary_key:
		if x[secondary_key] < y[secondary_key]:
			return -1
		elif x[secondary_key] > y[secondary_key]:
			return 1

	return 0

fmt = '{:15} {:25} {:55} {:15}'
if not args.noheader:
	print fmt.format('Region', 'ImageId', 'Name', 'CreationDate', 'Public')
	print fmt.format('---------------','--------------------', '-----------------------------------------------------', '---------------')

for x in regions:
	ec2 = boto3.client('ec2', region_name=x)
	res = ec2.describe_images(Owners=['797456418907'])

	output = []
	for i in range(len(res['Images'])):
		ami_id = res['Images'][i]['ImageId']
		ami_name = res['Images'][i]['Name']
		ami_creation_date = res['Images'][i]['CreationDate']
		output.append( (x, ami_id, ami_name, ami_creation_date) )

	for i in sorted(output, cmp=cmp_records):
		print fmt.format(i[0], i[1], i[2], i[3])
