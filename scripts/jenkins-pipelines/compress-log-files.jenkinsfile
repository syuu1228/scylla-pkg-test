#!groovy

Map modules = [:]

pipeline {
	agent {
			label {
				label "built-in"
			}
		}
		parameters {
			string(name: 'DISK_USAGE_THRESHOLD',defaultValue: '', description: 'Define Disk threshold in percentage')
			booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Check if you want mail to be sent to build requester only (you).Default will be send to releng')
			booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to check pipeline syntax. will not perform anything.')
			string(name: 'JENKINS_NODE_FILTER', defaultValue: 'qa', description: 'based on this value, logs will be compressed only in jenkins nodes that match this filter, default value:qa')
		}
		options {
			timestamps()
			timeout(time: 20, unit: 'MINUTES')
			buildDiscarder(logRotator(numToKeepStr: '10'))
		}
		stages {
			stage ('Prepare') {
				steps {
					script {
						generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
						branchProperties = readProperties file: 'scripts/jenkins-pipelines/branch-specific.properties'
						mail = load "${generalProperties.groovyPath}/mail.groovy"
						general = load "${generalProperties.groovyPath}/general.groovy"
						jenkins = load "${generalProperties.groovyPath}/jenkins.groovy"
						(jobTitle, logText, runningUserID, devAddress, relengAddress, qaAddress) = mail.setMailParameters(
							dryRun: params.DRY_RUN,
							debugMail: params.DEBUG_MAIL,
							branch: "Jenkins-Releng",
							devAddress: generalProperties.relengMail,
						)
						//Check IF params.DISK_USAGE_THRESHOLD is null/empty. if it is, the value will be based on the JOB_NAME
						if (params.DISK_USAGE_THRESHOLD == ''){
						    DISK_USAGE_THRESHOLD = "80"
						    println "Default threshold value: ${DISK_USAGE_THRESHOLD}%"
						}
						echo "Running build ${JOB_NAME} # ${BUILD_NUMBER}. Workspace is ${pwd()}"
					}
				}
			}

			stage ('Compress logs and Docker images on QA builders') {
				steps {
					script {
						jenkinsNodesToCompress = jenkins.compressJenkinsNodeLogs(DISK_USAGE_THRESHOLD)
						jenkinsNodesToCompressStr = "${jenkinsNodesToCompress.toString()}".replaceAll("[\\[\\]]","")
						nodeList = "${jenkinsNodesToCompressStr}".split('\\, ' -1)
						if (jenkinsNodesToCompressStr.contains(params.JENKINS_NODE_FILTER)) {
							nodeList.each { builder ->
								nodesToCompressList = jenkins.jenkinsNode(builder)
								if (builder.contains('gce')) {
									sshagent(credentials: ['b8a774da-0e46-4c91-9f74-09caebaea261']) {
										// Delete collected_logs folder older then 10days
										sh "ssh -o StrictHostKeyChecking=no jenkins@${nodesToCompressList} 'find -type d -name collected_logs 2>/dev/null -mtime +10 -exec rm -rf {} \\;'"
										//This Command will clear all docker images and volues older then 10 days
										sh "ssh -o StrictHostKeyChecking=no jenkins@${nodesToCompressList} 'docker system prune --volumes -f'"
									}
									} else {
										sshagent(credentials: ['user-jenkins_scylla-qa-ec2.pem']) {
											// Delete collected_logs folder older then 10days
											sh "ssh -o StrictHostKeyChecking=no jenkins@${nodesToCompressList} 'find -type d -name collected_logs 2>/dev/null -mtime +10 -exec rm -rf {} \\;'"
											//This Command will clear all docker images and volues older then 10 days
											sh "ssh -o StrictHostKeyChecking=no jenkins@${nodesToCompressList} 'docker system prune --volumes -f'"
										}
									}
								}
							}
						}
					}
				}
			}
		}
