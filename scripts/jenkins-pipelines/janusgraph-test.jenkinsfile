#!groovy

pipeline {
    parameters {
        // Mandatory
        string(name: 'X86_NODE_PARAM', defaultValue: 'gce-leader', description: 'Useful options: packager,loki,dgccd201,thor,ran,sif,huginn,muninn and gce-leader')
        string(name: 'SCYLLA_DOCKER_IMAGE', defaultValue: 'scylladb/scylla-nightly', description: 'Name of dockerhub repo')
        string(name: 'SCYLLA_DOCKER_VERSION', defaultValue: 'latest',  description: 'Tag of dockerhub repo')

        // Optional
        string(name: 'JANUSGRAPH_REPO', defaultValue: 'https://github.com/JanusGraph/janusgraph.git', description: 'JanusGraph git repo')
        string(name: 'JANUSGRAPH_BRANCH', defaultValue: 'master', description: 'JanusGraph git branch')
        string(name: 'TIMEOUT_PARAM', defaultValue: '3', description: 'Build timeout (in hours)')
        string(name: 'RELENG_REPO', defaultValue: '', description: 'pkg repo. If empty - will take scylla-pkg repo (examples: git@github.com:scylladb/scylla-pkg, git@github.com:scylladb/scylla-enterprise-pkg, git@github.com:hagitsegev/scylla-pkg)')
        string(name: 'RELENG_BRANCH', defaultValue: '', description: 'From where to run the package script and pipeline. Leave empty for the default stable branch (master)')

        booleanParam(name: 'PRESERVE_WORKSPACE', defaultValue: false, description: 'Check this if you need the workspace to remain (for debug)')
        booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Uncheck if you want mail to rnd-int. Default is to sent to build requester only (you).')
        booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Check this to check pipeline syntax. will not perform anything.')
    }

    agent {
        label {
            label env.X86_NODE_PARAM
        }
    }

    options {
        timeout(time: env.TIMEOUT_PARAM, unit: 'HOURS')
        buildDiscarder(
    			logRotator(
    				numToKeepStr: '10',
    				daysToKeepStr: env.JOB_NAME.contains("releng-testing") ? '14': ''
    			)
    		)
    }

    stages {

        stage ('Prepare') {
            steps {
                script {
                  generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
                  general = load "${generalProperties.groovyPath}/general.groovy"
                  general.initPipeline()

                  dockerVersion = params.SCYLLA_DOCKER_VERSION ?: branchProperties.dockerReleaseName
                  dockerImage = params.SCYLLA_DOCKER_IMAGE ?: "scylladb/${branchProperties.nightlyDockerRepoName}"
                  pkgScriptsDir = "$WORKSPACE/${gitProperties.scyllaPkgCheckoutDir}/${generalProperties.pipelinesShellPath}"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
                    git.checkoutToDir(relengRepo, relengBranch, gitProperties.scyllaPkgCheckoutDir, disableSubmodules)
                    git.checkoutToDir(params.JANUSGRAPH_REPO, params.JANUSGRAPH_BRANCH, 'janusgraph', false)
                }
            }
        }

        stage('Build and test') {
            environment {
                SCYLLA_DOCKER_VERSION = "$dockerVersion"
                SCYLLA_DOCKER_IMAGE  = "$dockerImage"
            }
            steps {
                script {
                    if (params.DRY_RUN) {
                        echo "Skip build as this is a dry-run build"
                    } else {
                        janusGraphScript = "$pkgScriptsDir/janusgraph-test.sh"
                        dir('janusgraph') {
                            sh "set -o pipefail; $janusGraphScript  2>&1 | tee output_janusgraph.txt"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                needToPublish = ! params.DRY_RUN
                publishStatus = test.publishTestResults(needToPublish, "janusgraph/**/target/surefire-reports/*.xml", "junit")
                if (publishStatus) {
                  echo "Error: Could not publish some item(s)."
                  logText += "\nCould not publish some item(s). See log for details"
                  if (currentBuild.currentResult != "ABORTED") {
                    currentBuild.result = 'FAILURE'
                  }
                }

                if (binding.hasVariable('initPipelineDone')) {
                  mail.mailIfError("${devAddress}", "${currentBuild.currentResult} stage ${lastStage}: ${jobTitle}", "${currentBuild.currentResult}: $jobTitle on stage ${lastStage}: $logText")
                  git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
                } else if (!(JOB_NAME.contains("releng-testing") || params.DRY_RUN || params.DEBUG_MAIL)) {
                  mail (
                    to: "releng@scylladb.com",
                    subject: "${currentBuild.currentResult}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                    body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] ${currentBuild.currentResult} at the very beginning. Please see Jenkins logs for details"
                  )
                  cleanWs()
                } else {
                  cleanWs()
                }
            }
        }
    }
}
