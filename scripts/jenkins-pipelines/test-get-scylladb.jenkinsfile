#!groovy
// Pipeline to test get.scylladb.com
// In order to debug, set branch on Jenkins job pipeline section and /or parameter with value of the debug branch.
// Parameter is used to run sh scripts, pipeline to checkout the pipeline and groovy functions.
// It is needed to be hard coded on pipeline, to enable each job to take its value of the branch,
// otherwise - value is deleted / get hte same value from the pipeline code each time it runs.
// example: refs/heads/build-pipeline-into-scm
// If you work on a fork, also set the RELENG_REPO with your fork such as git@github.com:hagitsegev/scylla-pkg or
// use the default repo of git@github.com:scylladb/scylla-pkg or git@github.com:scylladb/scylla-enterprise-pkg


Map modules = [:]
pipeline {
	parameters {
		// Mandatory:
		string(name: 'X86_NODE_PARAM', defaultValue: 'packager', description: 'On which node to run the build phase.')
		// Optional
		string(name: 'RELENG_REPO', defaultValue: '', description: 'Branch of pkg repo or fork. If empty - will take scylla-pkg repo (examples: git@github.com:scylladb/scylla-pkg, git@github.com:scylladb/scylla-enterprise-pkg, git@github.com:hagitsegev/scylla-pkg)')
		string(name: 'RELENG_BRANCH', defaultValue: '', description: 'Branch of pkg repo. If empty - will take master branch (master, branch-3.1)')
		string(name: 'WEB_INSTALL_REPO', defaultValue: '', description: 'Branch of pkg repo or fork. If empty - will take scylla-web-install repo (examples: git@github.com:scylladb/scylla-web-install, git@github.com:hagitsegev/scylla-web-install)')
		string(name: 'WEB_INSTALL_BRANCH', defaultValue: '', description: 'Branch of web install repo. If empty - will take main branch')
		booleanParam(name: 'TEST_CENTOS', defaultValue: true, description: 'Unset to skip test On CentOS')
		booleanParam(name: 'TEST_UNIFIED', defaultValue: true, description: 'Unset to skip test On Ubuntu-Debian')
		booleanParam(name: 'TEST_RHEL', defaultValue: false, description: 'Unset to skip test On RHEL')
		booleanParam(name: 'TEST_ORACLE', defaultValue: false, description: 'Unset to skip test On Oracle Linux')
		booleanParam(name: 'TEST_AMAZON', defaultValue: false, description: 'Unset to skip test On Amazon Linux')
		booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Set to test the pipeline code')
		booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Set to send mails to requester only')
	}

	agent {
		label {
			label env.X86_NODE_PARAM
		}
	}

	environment {
		AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
		AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
	}

	options {
		disableConcurrentBuilds()
		timeout(time: 2, unit: 'HOURS')
		buildDiscarder(
			logRotator(
				numToKeepStr: '10',
				daysToKeepStr: env.JOB_NAME.contains("releng-testing") ? '14': ''
			)
		)
	}

	stages {
		stage ('Prepare') {
			steps {
				script {
					generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
					general = load "${generalProperties.groovyPath}/general.groovy"
					general.initPipeline()

					git.cleanWorkSpaceUponRequest(false)
					git.checkoutToDir (relengRepo, relengBranch, gitProperties.scyllaPkgCheckoutDir, disableSubmodules)

					webInstallRepo = params.WEB_INSTALL_REPO ?: generalProperties.scyllaWebInstallRepoUrl
					webInstallBranch = params.WEB_INSTALL_BRANCH ?: generalProperties.scyllaWebInstallDefaultBranch
					if (webInstallRepo != generalProperties.scyllaWebInstallRepoUrl || webInstallBranch != generalProperties.scyllaWebInstallDefaultBranch) {
						git.checkoutToDir (webInstallRepo, webInstallBranch, generalProperties.scyllaWebInstallDir, disableSubmodules)
						boolean flattenDirs = true
						status = artifact.publishS3Artifact("server", "$WORKSPACE/${generalProperties.scyllaWebInstallDir}", generalProperties.debugBaseDownloadsUrl, flattenDirs)
						if (status) {
							error ("Could not upload the debug server script to cloud")
						}
						scyllaWebInstallUrl = generalProperties.debugBaseDownloadsUrl
					} else {
						scyllaWebInstallUrl = generalProperties.scyllaWebInstallUrl
					}

					centosWebUrl = branchProperties.latestCentOSUrl
					unifiedWebUrl = branchProperties.latestUnifiedOSUrl
					centosWebUrl = general.setTestingUrlIfNeeded (centosWebUrl)
					unifiedWebUrl = general.setTestingUrlIfNeeded (unifiedWebUrl)

					centosRelease = artifact.fetchMetadataValue (
						downloadFromCloud: true,
						cloudUrl: centosWebUrl,
						fieldName: "scylla-release:",
						fileSuffix: "centos",
					)

					unifiedRelease = artifact.fetchMetadataValue (
						downloadFromCloud: true,
						cloudUrl: unifiedWebUrl,
						fieldName: "scylla-release:",
						fileSuffix: "unified",
					)
				}
			}
		}

		stage('Installation Tests CentOS') {
			when {
				expression { params.TEST_CENTOS }
			}
			steps {
				script {
					install.parallelTestScyllaVersion (
						dryRun: params.DRY_RUN,
						testGetScylladb: true,
						oses2Test: branchProperties.supportedCentOsToTest,
						scyllaExpectedRelease: branchProperties.devReleaseName,
						scyllaExpectedVersionId: centosRelease,
						scyllaExpectedMode: "release",
						scyllaRepoOrListUrl: "nightly-$branchProperties.releaseName",
						productNameForCloudRepo: branchProperties.productNameForCloudRepo,
						justPrintErrors: true,
						scyllaWebInstallUrl: scyllaWebInstallUrl,
					)
				}
			}
		}

		stage('Installation Tests Unified-deb') {
			when {
				expression { params.TEST_UNIFIED }
			}
			steps {
				script {
					install.parallelTestScyllaVersion (
						dryRun: params.DRY_RUN,
						testGetScylladb: true,
						oses2Test: branchProperties.supportedUnifiedOsToTest,
						scyllaExpectedRelease: branchProperties.devReleaseName,
						scyllaExpectedVersionId: unifiedRelease,
						scyllaExpectedMode: "release",
						scyllaRepoOrListUrl: "nightly-$branchProperties.releaseName",
						productNameForCloudRepo: branchProperties.productNameForCloudRepo,
						justPrintErrors: true,
						scyllaWebInstallUrl: scyllaWebInstallUrl,
					)
				}
			}
		}

		stage('Installation Tests Oracle, RHEL and Amazon Linux') {
			when {
				expression { params.TEST_ORACLE || params.TEST_RHEL || params.TEST_AMAZON }
			}
			steps {
				script {
					oses2Test = ""
					if (params.TEST_AMAZON) {
						oses2Test = branchProperties.supportedAmazonLinuxOsToTest
					}
					if (params.TEST_RHEL) {
						if (oses2Test) {
							oses2Test += ",${branchProperties.supportedRhelOsToTest}"
						} else {
							oses2Test = branchProperties.supportedRhelOsToTest
						}
					}
					if (params.TEST_ORACLE) {
						if (oses2Test) {
							oses2Test += ",${branchProperties.supportedOracleLinuxOsToTest}"
						} else {
							oses2Test = branchProperties.supportedOracleLinuxOsToTest
						}
					}
					install.parallelTestScyllaVersion (
						dryRun: params.DRY_RUN,
						testGetScylladb: true,
						oses2Test: oses2Test,
						scyllaExpectedRelease: branchProperties.devReleaseName,
						scyllaExpectedVersionId: centosRelease,
						scyllaExpectedMode: "release",
						scyllaRepoOrListUrl: "nightly-$branchProperties.releaseName",
						productNameForCloudRepo: branchProperties.productNameForCloudRepo,
						justPrintErrors: true,
						scyllaWebInstallUrl: scyllaWebInstallUrl,
					)
				}
			}
		}
	}

	post {
		//Order is: always, changed, fixed, regression, aborted, failure, success, unstable, and cleanup.
		always {
			script {
				if (binding.hasVariable('initPipelineDone')) {
					mail.mailIfError("${devAddress}", "${currentBuild.currentResult}: $jobTitle", "${currentBuild.currentResult}: ${jobTitle}: $logText")
					git.cleanWorkSpaceUponRequest(false)
				} else if (!(JOB_NAME.contains("releng-testing") || params.DRY_RUN || params.DEBUG_MAIL)) {
					mail (
						to: "releng@scylladb.com",
						subject: "${currentBuild.currentResult}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
						body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] ${currentBuild.currentResult} at the very beginning. Please see Jenkins logs for details"
					)
					cleanWs()
				} else {
					cleanWs()
				}
			}
		}

		fixed {
			script {
				mail.mailFixed("${devAddress}", "Fixed ${currentBuild.currentResult}: $jobTitle", "Fixed ${currentBuild.currentResult}: ${jobTitle}: $logText")
			}
		}
	}
}
