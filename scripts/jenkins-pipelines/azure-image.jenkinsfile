#!groovy
// Pipeline Azure
// In order to debug, set branch on Jenkins job pipeline section and /or parameter with value of the debug branch.
// Parameter is used to run sh scripts, pipeline to checkout the pipeline and groovy functions.
// It is needed to be hard coded on pipeline, to enable each job to take its value of the branch,
// otherwise - value is deleted / get hte same value from the pipeline code each time it runs.
// example: refs/heads/build-pipeline-into-scm
// If you work on a fork, also set the RELENG_REPO with your fork such as git@github.com:hagitsegev/scylla-pkg or
// use the default repo of git@github.com:scylladb/scylla-pkg or git@github.com:scylladb/scylla-enterprise-pkg


Map modules = [:]
pipeline {
	parameters {
		// Mandatory:
		string(name: 'X86_NODE_PARAM', defaultValue: 'packager', description: 'On which node to run the gce image build. Useful options: packager,loki,dgccd201,thor,ran,huginn,muninn.')

		// Optional
		string(name: 'ARTIFACT_SOURCE_JOB_NAME', defaultValue: '', description: 'Build path to take artifacts from (usually centos-rpm). Use this with ARTIFACT_SOURCE_BUILD_NUM to get reloc from jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_SOURCE_BUILD_NUM', defaultValue: '', description: 'Build number to take artifacts from. Leave empty to use last available build. Use with ARTIFACT_SOURCE_JOB_NAME to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_WEB_URL', defaultValue: 'latest', description: 'URL of RPMs created by centos. Use when not available on jenkins, or when running on AWS, which will download faster from S3.')
		string(name: 'RELENG_REPO', defaultValue: '', description: 'Branch of pkg repo or fork. If empty - will take scylla-pkg repo (examples: git@github.com:scylladb/scylla-pkg, git@github.com:scylladb/scylla-enterprise-pkg, git@github.com:hagitsegev/scylla-pkg)')
		string(name: 'RELENG_BRANCH', defaultValue: '', description: 'Branch of pkg repo. If empty - will take stable branch (master)')
		string(name: 'MACHINE_IMAGE_REPO', defaultValue: '', description: 'Repo for machine-image. If empty - will take scylla repo')
		string(name: 'MACHINE_IMAGE_BRANCH', defaultValue: '', description: 'Branch of scylla-machine-image repo. If empty - will take stable branch')
		booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Set to test the pipeline code')
		booleanParam(name: 'PRESERVE_WORKSPACE', defaultValue: false, description: 'Set to avoid cleaning workspace before and after run, for debug needs')
		booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Set to send mails to requester only')
	}

	agent {
		label {
			label "built-in"
		}
	}

	options {
		disableConcurrentBuilds()
		timeout(time: 360, unit: 'MINUTES')
		buildDiscarder(
			logRotator(
				numToKeepStr: '10',
				daysToKeepStr: env.JOB_NAME.contains("releng-testing") ? '14': ''
			)
		)
		copyArtifactPermission('*release*')
	}

	stages {
		stage ('Prepare') {
			environment {
				AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
				AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
			}
			steps {
				script {
					generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
					general = load "${generalProperties.groovyPath}/general.groovy"
					general.initPipeline()

					machineImageRepo = params.MACHINE_IMAGE_REPO ?: gitProperties.scyllaMachineImageRepoUrl
					machineImageBranch = params.MACHINE_IMAGE_BRANCH ?: branchProperties.stableBranchName
					artifactSourceJobNum = params.ARTIFACT_SOURCE_BUILD_NUM ?: ""
					(qaJobProvisionType, qaNodesPostBehaviorType) = jenkins.setQAJobParameters()

					artifactSourceJob = params.ARTIFACT_SOURCE_JOB_NAME ?: "${branchProperties.calledBuildsDir}${branchProperties.unifiedDebJobName}"
					artifactSourceJobNum = artifactSourceJobNum ?: Jenkins.instance.getItemByFullName(artifactSourceJob).lastSuccessfulBuild.number.toString()
					paramArtifactWebUrl = params.ARTIFACT_WEB_URL ?: "latest"
					cloudUrl = artifact.getLastSuccessfulUrl (
						artifactWebUrl: paramArtifactWebUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						fieldName: "unified-deb-url:",
					)
					managerAgentListUrl = branchProperties.ubuntuManagerAgentListUrl
					scyllaListFileUrl= "${cloudUrl}${branchProperties.scyllaUnifiedPkgRepo}/${branchProperties.listFileName}"

					artifact.getArtifact(artifact: generalProperties.buildMetadataFile,
						targetPath: WORKSPACE,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						downloadFromCloud: true,
						sourceUrl: cloudUrl,
						ignoreMissingArtifact: false
					)
				}
			}
		}

		stage('Build Azure image') {
			steps {
				script {
					node(params.X86_NODE_PARAM) {
						jenkins.checkAndTagAwsInstance(runningUserID)
						echo "Checkout agent phase"
						echo "===================="
						git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
						git.checkoutToDir(relengRepo, relengBranch, gitProperties.scyllaPkgCheckoutDir, disableSubmodules)
						git.checkoutToDir(machineImageRepo, machineImageBranch, gitProperties.scyllaMachineImageCheckoutDir)

						echo "Build Azure image"
						echo "==============="
						(azureImageId, azureImageName) = build.buildAzure(
							dryRun: params.DRY_RUN,
							listFileUrl: scyllaListFileUrl,
						)
						git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
					}
				}
			}
		}

		stage('Publish Metadata') {
			steps {
				script {
					artifact.addLineToBuildMetadataFile("azure-image-id", azureImageId)
					artifact.addLineToBuildMetadataFile("azure-image-name", azureImageName)
					artifact.publishMetadataFile()
				}
			}
		}
	}

	post {
		//Order is: always, changed, fixed, regression, aborted, failure, success, unstable, and cleanup.
		always {
			script {
				git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
				if (binding.hasVariable('initPipelineDone')) {
					mail.mailIfError("${devAddress}", "${currentBuild.currentResult}: ${jobTitle}", "${currentBuild.currentResult}: ${jobTitle}: ${logText}")
				} else if (!(JOB_NAME.contains("releng-testing") || params.DRY_RUN || params.DEBUG_MAIL)) {
					mail (
						to: "releng@scylladb.com",
						subject: "${currentBuild.currentResult}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
						body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] ${currentBuild.currentResult} at the very beginning. Please see Jenkins logs for details"
					)
					cleanWs()
				} else {
					cleanWs()
				}
			}
		}

		fixed {
			script {
				mail.mailFixed("${devAddress}", "Fixed ${currentBuild.currentResult}: ${jobTitle}", "Fixed ${currentBuild.currentResult}: ${jobTitle}: ${logText}")
			}
		}
	}
}
