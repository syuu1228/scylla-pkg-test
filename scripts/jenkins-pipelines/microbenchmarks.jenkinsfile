#!groovy
// Pipeline microbenchmarks
// In order to debug, set branch on Jenkins job pipeline section and /or parameter with value of the debug branch.
// Parameter is used to run sh scripts, pipeline to checkout the pipeline and groovy functions.
// It is needed to be hard coded on pipeline, to enable each job to take its value of the branch,
// otherwise - value is deleted / get hte same value from the pipeline code each time it runs.
// example: refs/heads/build-pipeline-into-scm
// If you work on a fork, also set the RELENG_REPO with your fork such as git@github.com:hagitsegev/scylla-pkg or
// use the default repo of git@github.com:scylladb/scylla-pkg or git@github.com:scylladb/scylla-enterprise-pkg


Map modules = [:]
pipeline {
	parameters {
		// Mandatory:
		string(name: 'X86_NODE_PARAM', defaultValue: 'monster', description: 'On which node to run. Needs a one strong machine, as we compare performance related issues')

		// Optional
		string(name: 'SCYLLA_RELEASE', defaultValue: '', description: 'The scylla release such as master, enterprise, scylla-3.1. If empty - will take stable branch of the release (master)')
		string(name: 'SCT_BRANCH', defaultValue: '', description: 'Branch of SCT repo for Micro Bench Marks analyzer. If empty - will take stable branch (master)')
		string(name: 'ARTIFACT_SOURCE_JOB_NAME', defaultValue: '', description: 'Build path to take artifacts from (usually next or build). Use this with ARTIFACT_SOURCE_BUILD_NUM to get reloc from jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_SOURCE_BUILD_NUM', defaultValue: '', description: 'Build number to take artifacts from. Leave empty to use last available build. Use with ARTIFACT_SOURCE_JOB_NAME to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
		string(name: 'ARTIFACT_WEB_URL', defaultValue: 'latest', description: 'URL to take reloc items from. Use when reloc is not available on jenkins, or when running on AWS, which will download faster from S3.')
		string(name: 'RELENG_REPO', defaultValue: '', description: 'Branch of pkg repo or fork. If empty - will take scylla-pkg repo (examples: git@github.com:scylladb/scylla-pkg, git@github.com:scylladb/scylla-enterprise-pkg, git@github.com:hagitsegev/scylla-pkg)')
		string(name: 'RELENG_BRANCH', defaultValue: '', description: 'Branch of pkg repo. If empty - will take master branch (master, branch-3.1)')
		booleanParam(name: 'DRY_RUN', defaultValue: false, description: 'Set to test the pipeline code')
		booleanParam(name: 'PRESERVE_WORKSPACE', defaultValue: false, description: 'Set to avoid cleaning workspace before and after run, for debug needs')
		booleanParam(name: 'DEBUG_MAIL', defaultValue: false, description: 'Set to send mails to requester only')
	}

	agent {
		label {
			label env.X86_NODE_PARAM
		}
	}

	environment {
		AWS_ACCESS_KEY_ID      = credentials('jenkins2-aws-secret-key-id')
		AWS_SECRET_ACCESS_KEY  = credentials('jenkins2-aws-secret-access-key')
	}

	options {
		disableConcurrentBuilds()
		timeout(time: 80, unit: 'MINUTES')
		buildDiscarder(
			logRotator(
				numToKeepStr: '10',
				daysToKeepStr: env.JOB_NAME.contains("releng-testing") ? '14': ''
			)
		)
	}

	stages {

		stage ('Prepare') {
			steps {
				script {
					generalProperties = readProperties file: 'scripts/jenkins-pipelines/general.properties'
					general = load "${generalProperties.groovyPath}/general.groovy"
					general.initPipeline()
					// This is also called by the above initPipeline, but here, I want a different devAddress, so I call it again.
					(jobTitle,logText,runningUserID,devAddress,relengAddress,qaAddress)=mail.setMailParameters(
						dryRun: params.DRY_RUN,
						debugMail: params.DEBUG_MAIL,
						branch: branchProperties.stableBranchName,
						devAddress: generalProperties.perfMail,
					)

					buildMode = "release"
					releaseName = params.SCYLLA_RELEASE ?: branchProperties.stableBranchName
					artifactSourceJob = params.ARTIFACT_SOURCE_JOB_NAME ?: "${branchProperties.calledBuildsDir}${branchProperties.relocUploaderJobName}"
					artifactSourceJobNum = params.ARTIFACT_SOURCE_BUILD_NUM ?: Jenkins.instance.getItemByFullName(artifactSourceJob).lastSuccessfulBuild.number.toString()
					paramArtifactWebUrl = params.ARTIFACT_WEB_URL ?: "latest"
					cloudUrl = artifact.getLastSuccessfulUrl (
						artifactWebUrl: paramArtifactWebUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						fieldName: "reloc-pack-url:"
					)
				}
			}
		}

		stage('Checkout') {
			steps {
				script {
					clusterTestsBranch = params.SCT_BRANCH ?: branchProperties.stableQABranchName
					git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
					git.checkoutToDir (relengRepo, relengBranch, gitProperties.scyllaPkgCheckoutDir, disableSubmodules)
					git.checkoutToDir(generalProperties.scyllaClusterTestsRepoUrl, clusterTestsBranch, generalProperties.scyllaClusterTestsCheckoutDir)
					artifact.getDbuildAsArtifactOrFromSourceControl (
						webUrl: cloudUrl,
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						scyllaBranch: branchProperties.stableBranchName,
						downloadFromCloud: false,
					)
				}
			}
		}

		stage('Copy Artifacts') {
			steps {
				script {
					artifact.getRelocArtifacts (
						buildMode: buildMode,
						cloudUrl: cloudUrl,
						architecture: branchProperties.x86ArchName,
					)

					artifact.getTestArtifacts (
						artifactSourceJob: artifactSourceJob,
						artifactSourceJobNum: artifactSourceJobNum,
						downloadFromCloud: false,
						cloudUrl: cloudUrl
					)
					general.lsPath (WORKSPACE, "content after getting artifacts of relocatable packages")
				}
			}
		}

		stage('MicroBenchmarks') {
			steps {
				script {
					test.microBenchMarks(params.DRY_RUN)
				}
			}
		}

		stage('MicroBenchmarks Analyzer') {
			environment {
				AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
				AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
			}
			steps {
				script {
					test.microBenchMarksAnalyzer(params.DRY_RUN, "$devAddress", params.DEBUG_MAIL)
				}
			}
		}
	}

	post {
		//Order is: always, changed, fixed, regression, aborted, failure, success, unstable, and cleanup.
		always {
			script {
				if (binding.hasVariable('initPipelineDone')) {
					mail.mailIfError("$devAddress", "${currentBuild.currentResult}: $jobTitle", "${currentBuild.currentResult}: ${jobTitle}: $logText")
					git.cleanWorkSpaceUponRequest(params.PRESERVE_WORKSPACE)
				} else if (!(JOB_NAME.contains("releng-testing") || params.DRY_RUN || params.DEBUG_MAIL)) {
					mail (
						to: "releng@scylladb.com",
						subject: "${currentBuild.currentResult}: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
						body: "${env.JOB_NAME} [${env.BUILD_NUMBER}] ${currentBuild.currentResult} at the very beginning. Please see Jenkins logs for details"
					)
					cleanWs()
				} else {
					cleanWs()
				}
			}
		}

		fixed {
			script {
				mail.mailFixed("$devAddress", "Fixed ${currentBuild.currentResult}: $jobTitle", "Fixed ${currentBuild.currentResult}: ${jobTitle}: $logText")
			}
   	}
	}
}
