#!groovy

pipeline {
    parameters {
        string(name: 'ARTIFACT_SOURCE_JOB_NAME', defaultValue: '', description: 'Build path to take artifacts from (usually unified-deb). Use with ARTIFACT_SOURCE_BUILD_NUM to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
        string(name: 'ARTIFACT_SOURCE_BUILD_NUM', defaultValue: '', description: 'Build number to take artifacts from. Leave empty to use last available build. Use with ARTIFACT_SOURCE_JOB_NAME to take artifacts from Jenkins, or ARTIFACT_WEB_URL to take them from cloud.')
        string(name: 'ARTIFACT_WEB_URL', defaultValue: 'latest', description: 'URL of deb (or RPM) repo created by unified-deb (or CentOS-RPM) process. Use when not available on jenkins, or when running on AWS, which will download faster from S3.')
		choice(name: 'OS_DISTRO', choices: ['ubuntu:20.04', 'centos:7'], description: 'Choose on which OS the AMI will be build. Please note that centos:7 is kept for end cases manual use')
        string(name: 'TEST_EXISTING_AMI_ID', defaultValue: '', description: 'AMI ID to test. If empty - will build a new AMI')
        booleanParam(name: 'SKIP_TEST', defaultValue: false, description: 'Set to skip ami test - for debug use')
        booleanParam(name: 'RUN_AMI_VERSION_TAG_TEST', defaultValue: false, description: 'Set to run releng AMI version tag verification')
        booleanParam(name: 'SKIP_COPY', defaultValue: false, description: 'Set to skip copying ami')
    }

    agent {
        label {
            label 'built-in'
        }
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
    }

    stages {
        stage('build') {
            steps {
                script {
                    /* hardcoding node for getting locally saved api token */
                    node('sif') {
                        checkout scm
                        sh "pip3 install virtualenv"
                        sh "python3 -m virtualenv poc-venv"
                        sh "source poc-venv/bin/activate && pip3 install invoke rich requests"
                        if (params.RUN_AMI_VERSION_TAG_TEST) {
                            tagTest = '--tag-test'
                        } else {
                            tagTest = '--no-tag-test'
                        }
                        sh "poc-venv/bin/invoke ami.build --job-name=${params.ARTIFACT_SOURCE_JOB_NAME} --build-num=${params.ARTIFACT_SOURCE_BUILD_NUM} --artifact-url=${params.ARTIFACT_WEB_URL} --distro=${params.OS_DISTRO} --test-existing-ami-id=${params.TEST_EXISTING_AMI_ID} ${tagTest}"
                        amiProperties = readFile file: "$WORKSPACE/amiId.properties"
                        archiveArtifacts artifacts: "00-Build.txt"
                        archiveArtifacts artifacts: "ami.log"
                        archiveArtifacts artifacts: "amiId.properties"
                    }
                }
            }
        }
        stage('test') {
            when {
                expression {! params.SKIP_TEST}
            }
            steps {
                script {
                    /* hardcoding node for running SCT */
                    node('aws-sct-builders-us-east-1-new') {
                        checkout scm
                        writeFile file: "$WORKSPACE/amiId.properties", text: amiProperties
                        sh "pip3 install virtualenv"
                        sh "python3 -m virtualenv poc-venv"
                        sh "source poc-venv/bin/activate && pip3 install invoke rich requests"
                        sh "poc-venv/bin/invoke ami.test"
                    }
                }
            }
        }
        stage('copy') {
            expression {! params.SKIP_COPY}
            steps {
                script {
                    node('packager') {
                        checkout scm
                        sh "pip3 install virtualenv"
                        sh "python3 -m virtualenv poc-venv"
                        sh "source poc-venv/bin/activate && pip3 install invoke rich requests"
//                        sh "poc-venv/bin/invoke ami.copy"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                cleanWs()
            }
        }
    }
}
