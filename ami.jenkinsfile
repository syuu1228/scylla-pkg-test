#!groovy

pipeline {
    parameters {
        string(name: 'REPO', defaultValue: 'http://downloads.scylladb.com/unstable/scylla/master/deb/unified/2021-08-26T12:02:36Z/scylladb-master/scylla.list', description: 'repo url for AMI')
        string(name: 'X86_NODE_PARAM', defaultValue: 'packager', description: 'On which node to run the ami build. Useful options: packager,loki,dgccd201,thor,ran,huginn,muninn.')
		choice(name: 'OS_DISTRO', choices: ['ubuntu:20.04', 'centos:7'], description: 'Choose on which OS the AMI will be build. Please note that centos:7 is kept for end cases manual use')
        string(name: 'TEST_EXISTING_AMI_ID', defaultValue: '', description: 'AMI ID to test. If empty - will build a new AMI')
        booleanParam(name: 'SKIP_TEST', defaultValue: false, description: 'Set to skip ami test - for debug use')
    }

    agent {
        label {
            label 'built-in'
        }
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins2-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins2-aws-secret-access-key')
    }

    stages {
        stage('build') {
            steps {
                script {
                    node(params.X86_NODE_PARAM) {
                        checkout scm
                        sh "pip3 install virtualenv"
                        sh "python3 -m virtualenv poc-venv"
                        sh "source poc-venv/bin/activate && pip3 install invoke rich"
                        if (params.TEST_EXISTING_AMI_ID == '') {
                            sh "poc-venv/bin/invoke ami.build --repo ${params.REPO} --distro ${params.OS_DISTRO}"
                            amiProperties = readProperties file: "$WORKSPACE/amiId.properties"
                        } else {
                            sh "poc-venv/bin/invoke ami.generate-properties --ami-id ${params.TEST_EXISTING_AMI_ID}"
                            amiProperties = readProperties file: "$WORKSPACE/amiId.properties"
                        }
                    }
                }
            }
        }
        stage('test') {
            when {
                expression {! params.SKIP_TEST}
            }
            steps {
                script {
                    node('aws-sct-builders-us-east-1-new') {
                        if (amiProperties.scylla_ami_id.isEmpty()) {
                            currentBuild.result = 'FAILURE'
                            error("Missing AMI ID. Expected property scylla_ami_id on file amiPropertiesFile created on build phase. Can't run tests")
                        }
                        checkout scm
                        sh "pip3 install virtualenv"
                        sh "python3 -m virtualenv poc-venv"
                        sh "source poc-venv/bin/activate && pip3 install invoke rich"
                        sh "poc-venv/bin/invoke ami.test --ami-id ${amiProperties.scylla_ami_id}"
                    }
                }
            }
        }
    }
}
